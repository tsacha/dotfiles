;; Straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq package-enable-at-startup nil)
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)


;; Generic configuration
;;;; Latitude/Longitude
(setq calendar-latitude +47.23)
(setq calendar-longitude -1.63)
(setq calendar-location-name "Nantes, France")

;;; Startup messages
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)

;;;; Personal informations
(setq user-full-name "Sacha Tr√©moureux"
      user-mail-address "sacha@tremoureux.fr")

;;;; History
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

;;;; Backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;;;; Sentences end with a single space
(setq sentence-end-double-space nil)

;;;;; Mouse autoselect
(setq mouse-autoselect-window t)

;;;; yes/no questions
(setq use-short-answers t)

;;;; Clock
(display-time-mode 1)
(setq display-time-default-load-average nil)

;; Hide (menu|scroll|tool)bar
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1) 

;;;; GPG agent
(setenv "SSH_AUTH_SOCK" "/run/user/1000/gnupg/S.gpg-agent.ssh")

;;;; GPG
(setq epg-gpg-program "gpg2")

;; Theme
(use-package ef-themes)
(use-package dbus)
(use-package gsettings)

(defun tsacha/select-theme (&rest signal)
  "Select theme matching system settings"
  (cond
   ;;; Linux
   ((string-equal system-type "gnu/linux")
    (if (string-equal (gsettings-get "org.gnome.desktop.interface" "gtk-theme") "Adwaita")
	(ef-themes-select 'ef-trio-light)
      (ef-themes-select 'ef-trio-dark)))
   ;;; MacOS
   ((string-equal system-type "darwin")
    (if (string-equal ns-system-appearance "light")
	(ef-themes-select 'ef-trio-light)
      (ef-themes-select 'ef-trio-dark)))))

;;; Register system settings hooks
(cond
 ((string-equal system-type "gnu/linux")
  (tsacha/select-theme)
  (dbus-register-signal :session nil "/ca/desrt/dconf/Writer/user" "ca.desrt.dconf.Writer" "Notify" 'tsacha/select-theme))
 ((string-equal system-type "darwin")
  (add-hook 'ns-system-appearance-change-functions #'tsacha/select-theme)))

(use-package diminish)
(use-package prescient)
(use-package vertico-prescient)

;; Enable vertico
(use-package vertico
  :init
  (vertico-prescient-mode)
  (vertico-mode))

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :init
  (marginalia-mode))

(use-package consult
  :init
  :bind
  ("C-s" . consult-line))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
	completion-category-defaults nil
	completion-category-overrides '((file (styles . (partial-completion))))))


(use-package projectile
  :diminish projectile
  :init
  (projectile-mode)
  (setq projectile-project-search-path '(("~/Git" . 1) ("~/Git/Work" . 1)))
  (setq projectile-switch-project-action #'projectile-dired)
  (projectile-discover-projects-in-search-path))

(use-package magit)

(use-package centaur-tabs
  :after projectile
  :init
  (setq centaur-tabs-enable-key-bindings t)
  (setq centaur-tabs-style "chamfer"
        centaur-tabs-height 24
        centaur-tabs-set-modified-marker t
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        centaur-tabs-left-edge-margin nil
	centaur-tabs-adjust-buffer-order t
	centaur-tabs--buffer-show-groups t

	
        x-underline-at-descent-line t
	uniquify-separator "/"
	uniquify-buffer-name-style 'forward)
  (centaur-tabs-mode t)
  :hook
  (ibuffer-mode . centaur-tabs-local-mode)  
  :config
  (centaur-tabs-group-by-projectile-project)
  :bind
  ("C-c p k" . centaur-tabs-kill-all-buffers-in-current-group)
  ("C-<iso-lefttab>" . centaur-tabs-backward-group)
  ("C-<tab>" . centaur-tabs-forward-group))

(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :config
  (setq consult-projectile-use-projectile-switch-project t)  
  :bind
  ("C-c p f" . consult-projectile-find-file)
  ("C-x b"   . consult-projectile-switch-to-buffer)    
  ("C-c p p" . consult-projectile-switch-project))


(use-package ibuffer-projectile
  :init
  (add-hook 'ibuffer-hook
    (lambda ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))))
  :bind
  ("C-x C-b" . ibuffer-list-buffers))
